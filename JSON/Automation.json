{"files":[{"id":"d7accc1c-4cd1-414c-964a-48230bd27107","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Singapore\",\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"dependencies\": {}\n}"},{"id":"be0a23e1-683e-456e-b606-c015d800de54","name":"customizedTrigger","type":"server_js","source":"\r\n/**\r\n * Yearly Trigger\r\n * Checks for trigger. Only creates trigger with unique name\r\n * Uses Installable trigger to automate the trigger \r\n * Click here to learn more https://developers.google.com/apps-script/guides/triggers/installable\r\n * @params {string} triggerName : Name of the trigger\r\n */\r\nfunction yearlyTrigger(triggerName) {\r\n  var scriptArray \u003d ScriptApp.getProjectTriggers();\r\n  if (scriptArray.find(script \u003d\u003e script.getHandlerFunction() \u003d\u003d\u003d triggerName))\r\n    return;\r\n  let d \u003d dateHelper.getYearEnd();\r\n  ScriptApp\r\n    .newTrigger(triggerName)\r\n    .timeBased()\r\n    .at(d)\r\n    .create();\r\n}\r\n\r\n\r\n/**\r\n * Check for particular spreadsheet and constantly listen when spreadsheet is open\r\n * Checks for trigger. Only creates trigger with unique name\r\n * Uses Installable trigger to automate the trigger\r\n * Click here to learn more https://developers.google.com/apps-script/guides/triggers/installable\r\n * @params {Spreadsheet} ss : Targeted Spreadsheet\r\n * @params {string} triggerName : Name of the trigger\r\n */\r\nfunction onOpenSpreadsheetTrigger(ss,triggerName) {\r\n  var triggers \u003d ScriptApp.getProjectTriggers();\r\n  if (!triggers.find(trigger \u003d\u003e (trigger.getTriggerSourceId() \u003d\u003d ss.getId()) \u0026\u0026 trigger.getHandlerFunction() \u003d\u003d\u003d triggerName)) {\r\n  console.log(\"Inserting Trigger\");\r\n  ScriptApp.newTrigger(triggerName)\r\n    .forSpreadsheet(ss)\r\n    .onOpen()\r\n    .create();\r\n  }\r\n}\r\n\r\n/**\r\n * Timely Basis Trigger only called to extend execution time of Google Spreadsheet\r\n * Click here to learn more https://developers.google.com/apps-script/guides/triggers/installable\r\n * @params {string} triggerName : Name of the trigger\r\n * @params {string} functionName : Name of the function\r\n * @params {numbers} time: Extension of the time\r\n */\r\nfunction timeBasedTrigger(triggerName,functionName,time \u003d 120000) {\r\n    let trigger \u003d ScriptApp.newTrigger(functionName).timeBased().after(time).create();\r\n    let triggerID \u003d trigger.getUniqueId();\r\n    properties.setProperty(triggerName, triggerID);\r\n    return trigger;\r\n}\r\n\r\n"},{"id":"bac82837-19bc-4d3e-ba9b-ec073b57fe3c","name":"triggerAutomation","type":"server_js","source":"/* -----------------------------------------------------------------------------------Time Based Trigger --------------------------------------------------------------------------------------------*/\n\n/**\n * Create Yearly Folder Hierarchy\n * Automatically be called by Trigger Yearly.\n * Constraints: 1. Cannot contain any parameters\n *              2. Any Changes to the code will cause changes within the yearly trigger\n */\nfunction createYearlyHierarchy() {\n  try {\n    let nextYear \u003d dateHelper.getNextYear().getFullYear().toString();\n    var hierarchy \u003d\n    {\n      parentFolder: `ESS ${nextYear}`,\n      subDirectories: [\"1. Events (OTH) - Quotations x Timesheet x Invoice x Payout\", \"Availability\", \"Rostering\"],\n      args:\n        [{\n          parentFolder: \"1. Events (OTH) - Quotations x Timesheet x Invoice x Payout\",\n          subDirectories: [`OTH #${nextYear}-999 Completed Projects ${nextYear}`, `OTH #${nextYear}-998 Cancelled Projects ${nextYear}`]\n        }]\n    };\n    var rootFolder \u003d folder.retrieveFolderByName(\"ESS Main Folder\");\n    folder.generateFolderHierarchy(hierarchy, rootFolder);\n  } catch (e) {\n    ErrorHandler.insertErrorLog(e);\n  }\n}\n\n/**\n * Create Yearly Spreadsheet\n * Automatically be called by Trigger Yearly\n * Constraints:  1. Cannot contain any parameters\n *               2. Any changes to the code will cause changes within yearly trigger\n */\nfunction createYearlySpreadsheets() {\n  try {\n    let nextYear \u003d dateHelper.getNextYear();\n    let month \u003d dateHelper.getMonthName(nextYear).slice(0, 3);\n    var rootFolder \u003d folder.retrieveFolderByName(`ESS ${nextYear.getFullYear().toString()}`);\n    if (!rootFolder)\n      createYearlyHierarchy();\n    rootFolder \u003d folder.retrieveFolderByName(`ESS ${nextYear.getFullYear().toString()}`);\n    let availFolder \u003d folder.retrieveFolderByName(\"Availability\", rootFolder);\n    let rosterFolder \u003d folder.retrieveFolderByName(\"Rostering\", rootFolder);\n    let availFile \u003d file.retrieveFileByName(\"Yearly Availability\", availFolder);\n    let rosterFile \u003d file.retrieveFileByName(\"Yearly Roster Mastersheet\", rosterFolder);\n    let availSS \u003d !availFile ? file.createSpreadsheetToFolder(\"Yearly Availability\", availFolder) : SpreadsheetApp.open(availFile);\n    let rosterSS \u003d !rosterFile ? file.createSpreadsheetToFolder(\"Yearly Roster Mastersheet\", rosterFolder) : SpreadsheetApp.open(rosterFile);\n    let avail \u003d new Spreadsheet(availSS);\n    let roster \u003d new Spreadsheet(rosterSS);\n    avail.generateTemplate(TemplateType.Availability, month);\n    roster.generateTemplate(TemplateType.Roster, month);\n  } catch (e) {\n    ErrorHandler.insertErrorLog(e);\n  }\n}\n\n\n/*--------------------------------------------------------------------------Event Based Trigger ---------------------------------------------------------------------------------------------------- */\n\n/**\n * Create Monthly Spreadsheet\n * @params {Event} spreadsheetEvent: An Event which contains the spreadsheet that is being targeted\n */\nfunction createMonthlyAvailSpreadsheet(spreadsheetEvent) {\n  try {\n    let source \u003d spreadsheetEvent.source;\n    var triggers \u003d ScriptApp.getProjectTriggers();\n    let triggerID \u003d spreadsheetEvent.triggerUid;\n    let { date, month } \u003d dateHelper.getCurrentDates();\n    if (triggers.find(trigger \u003d\u003e trigger.getUniqueId() \u003d\u003d\u003d triggerID)) {\n      if (month \u003d\u003d\u003d 11)\n        ScriptApp.deleteTrigger(this);\n      else {\n        let ss \u003d new Spreadsheet(source);\n        let nextMonth \u003d dateHelper.getNextMonth().slice(0, 3);\n        if (ss.getSheet(nextMonth))\n          return;\n        if (date \u003e 10) {\n          ss.generateTemplate(TemplateType.Availability, nextMonth);\n        }\n      }\n    }\n  } catch (e) {\n    let ui \u003d SpreadsheetApp.getUi();\n    let handler \u003d new ErrorHandler(ui);\n    handler.createAlert(e);\n  }\n}\n\n/**\n * Create Monthly Spreadsheet\n * @params {Event} spreadsheetEvent: An Event which contains the spreadsheet that is being targeted\n */\nfunction createMonthlyRosterSpreadsheet(spreadsheetEvent) {\n  try {\n    let source \u003d spreadsheetEvent.source;\n    var triggers \u003d ScriptApp.getProjectTriggers();\n    let triggerID \u003d spreadsheetEvent.triggerUid;\n    let { date, month } \u003d dateHelper.getCurrentDates();\n    if (triggers.find(trigger \u003d\u003e trigger.getUniqueId() \u003d\u003d\u003d triggerID)) {\n      if (month \u003d\u003d\u003d 11)\n        ScriptApp.deleteTrigger(this);\n      else {\n        let ss \u003d new Spreadsheet(source);\n        let nextMonth \u003d dateHelper.getNextMonth().slice(0, 3);\n        if (ss.getSheet(nextMonth))\n          return;\n        if (date \u003e 10) {\n          ss.generateTemplate(TemplateType.Roster, nextMonth);\n        }\n      }\n    }\n  } catch (e) {\n    let ui \u003d SpreadsheetApp.getUi();\n    let handler \u003d new ErrorHandler(ui);\n    handler.createAlert(e);\n  }\n}\n\n\n/**\n * Trigger Function which create Menu. This UI allows easier update based on visuals\n * @params {Event} spreadsheetEvent: An Event which contains the spreadsheet that is being targeted\n */\nfunction createAvailMenu(spreadsheetEvent) {\n  try {\n    let ss \u003d spreadsheetEvent.source;\n    Menu.createMenu(ss, \"Avail Menu\", [\"Update Data\", \"refreshAvailabilityData\"],[\"Clear Cache\",\"clearCache\"]);\n  } catch (e) {\n    let ui \u003d SpreadsheetApp.getUi();\n    let handler \u003d new ErrorHandler(ui);\n    handler.createAlert(e);\n  }\n}\n\n/**\n * Trigger Function which create Menu. This UI allows easier update based on visuals\n * Menus are customized based on the Spreadsheet\n * @params {Event} spreadsheetEvent: An Event which contains the spreadsheet that is being targeted\n */\nfunction createRosterMenu(spreadsheetEvent) {\n  try {\n    let ss \u003d spreadsheetEvent.source;\n    Menu.createMenu(ss, \"Roster Menu\", [\"Update Data\", \"updateRosterSpreadsheet\"], [\"Generate Timesheet Data\", \"generateTimesheet\"]);\n  } catch (e) {\n    let ui \u003d SpreadsheetApp.getUi();\n    let handler \u003d new ErrorHandler(ui);\n    handler.createAlert(e);\n  }\n}\n\n/**\n * Trigger Function which create Menu. This UI allows easier update based on visuals\n * Menus are customized based on the Spreadsheet\n * @params {Event} spreadsheetEvent: An Event which contains the spreadsheet that is being targeted\n */\nfunction createMasterMenu(spreadsheetEvent) {\n  try {\n    let ss \u003d spreadsheetEvent.source;\n    Menu.createMenu(ss, \"Master Menu\", [\"Insert Individuals Spreadsheet\", \"createNewIndividualTemplate\"],[\"Update Individuals Spreadsheet\", \"generateIndividualSpreadsheet\"]);\n  } catch (e) {\n    let ui \u003d SpreadsheetApp.getUi();\n    let handler \u003d new ErrorHandler(ui);\n    handler.createAlert(e);\n  }\n}\n\n"},{"id":"2f9281af-a811-41ab-a114-094292908625","name":"main","type":"server_js","source":"/**\n * A Fixed List of Recurrence Rate\n */\nconst RecurrenceRate \u003d Object.freeze({\n  Daily: Symbol(\"Daily\"),\n  Monthly: Symbol(\"Monthly\"),\n  Yearly: Symbol(\"Yearly\"),\n  Once: Symbol(\"Once\")\n})\n\nfunction main() {\n  let masterFolder \u003d folder.retrieveFolderByName(\"Master Folder\");\n  let eventFile \u003d file.retrieveFileByName(\"Event Crew\",masterFolder);\n  let ss \u003d SpreadsheetApp.open(eventFile);\n  onOpenSpreadsheetTrigger(ss,\"createMasterMenu\");\n}\n\nfunction createCurrentYearHierarchy() {\n    try {\n    let year \u003d dateHelper.getYear();\n    var hierarchy \u003d\n    {\n      parentFolder: `ESS ${year}`,\n      subDirectories: [\"1. Events (OTH) - Quotations x Timesheet x Invoice x Payout\", \"Availability\", \"Rostering\"],\n      args:\n        [{\n          parentFolder: \"1. Events (OTH) - Quotations x Timesheet x Invoice x Payout\",\n          subDirectories: [`OTH #${year}-999 Completed Projects ${year}`, `OTH #${year}-998 Cancelled Projects ${year}`]\n        }]\n    };\n    var rootFolder \u003d folder.retrieveFolderByName(\"ESS Main Folder\");\n    folder.generateFolderHierarchy(hierarchy, rootFolder);\n  } catch (e) {\n    ErrorHandler.insertErrorLog(e); \n  }\n}\n\nfunction createCurrentYearSpreadsheet() {\n  try {\n    let year \u003d dateHelper.getYear();\n    let month \u003d dateHelper.getMonthName().slice(0,3);\n    var rootFolder \u003d folder.retrieveFolderByName(`ESS ${year}`);\n    if (!rootFolder)\n      createYearlyHierarchy();\n    rootFolder \u003d folder.retrieveFolderByName(`ESS ${year}`);\n    let availFolder \u003d folder.retrieveFolderByName(\"Availability\", rootFolder);\n    let rosterFolder \u003d folder.retrieveFolderByName(\"Rostering\", rootFolder);\n    let availFile \u003d file.retrieveFileByName(\"Yearly Availability\", availFolder);\n    let rosterFile \u003d file.retrieveFileByName(\"Yearly Roster Mastersheet\", rosterFolder);\n    let availSS \u003d !availFile ? file.createSpreadsheetToFolder(\"Yearly Availability\", availFolder) : SpreadsheetApp.open(availFile);\n    let rosterSS \u003d !rosterFile ? file.createSpreadsheetToFolder(\"Yearly Roster Mastersheet\", rosterFolder) : SpreadsheetApp.open(rosterFile);\n    let avail \u003d new Spreadsheet(availSS);\n    let roster \u003d new Spreadsheet(rosterSS);\n    avail.generateTemplate(TemplateType.Availability, month);\n    roster.generateTemplate(TemplateType.Roster, month);\n  } catch (e) {\n    ErrorHandler.insertErrorLog(e);\n  }\n}"},{"id":"734a698b-6e68-4221-a262-ce4d6c1683e4","name":"Spreadsheet","type":"server_js","source":"/**\n * A List of Fixed Types to generate Spreadsheet\n */\nconst TemplateType \u003d Object.freeze({\n  Availability: Symbol(\"Availability\"),\n  Timesheet: Symbol(\"Timesheet\"),\n  Roster: Symbol(\"Roster\"),\n  Individuals: Symbol(\"Individuals\")\n})\n\n/**\n * A class that creates templates and format all sheets within a particular spreadsheet\n */\nclass Spreadsheet {\n  /**\n   * Creation of class must require a spreadsheet file\n   */\n  constructor(spreadsheet) {\n    this.spreadsheet \u003d spreadsheet;\n  }\n\n  /**\n   * Get Name of the Spreadsheet\n   */\n  getName() {\n    return this.spreadsheet.getName();\n  }\n  /**\n   * Get Sheet By Name\n   * @params {string} sheetName: Name of the specific sheet\n   * return {Sheet} return a customized class of Sheet \n   */\n  getSheet(sheetName) {\n    if (typeof sheetName !\u003d\u003d \"string\")\n      throw new TypeError(\"Please choose the correct format\");\n    let sheet \u003d this.spreadsheet.getSheetByName(sheetName);\n    if (!sheet) {\n      return null;\n    }\n    return new Sheet(sheet);\n  }\n\n  /**\n   * Insert Sheet Sheet\n   * @params {string} sheetName: Name of the Month (Also name of the sheet)\n   * @return {Sheet} sheet: Returns a New Object Sheet\n   */\n  insertSheet(sheetName) {\n    if ((typeof sheetName !\u003d\u003d \"string\"))\n      throw new TypeError(\"Please choose the correct format!\")\n    let sheets \u003d this.spreadsheet.getSheets();\n    let foundSheet \u003d sheets.find(sheet \u003d\u003e sheet.getName() \u003d\u003d\u003d sheetName);\n    if (sheets.length \u003d\u003d\u003d 1 \u0026\u0026\n      sheets[0].getName() \u003d\u003d\u003d \"Sheet1\") {\n      console.log(\"Renaming Sheet Name to Month\");\n      foundSheet \u003d sheets[0].setName(sheetName);\n    }\n    else if (!foundSheet) {\n      console.log(\"Unable to find the correct sheet! Inserting Sheet into spreadsheet\");\n      foundSheet \u003d this.spreadsheet.insertSheet(sheetName,sheets.length - 1);\n    }\n    return new Sheet(foundSheet);\n  }\n\n  /**\n   * Generats a Sheet template\n   * @params {TemplateType} type: A Fixed List that detects type of template to generate\n   * @params {string} sheetName: Name of the sheet\n   * return {Sheet} sheet: The sheet that was targeted\n   */\n  generateTemplate(type \u003d TemplateType, sheetName) {\n    if ((!type))\n      throw new TypeError(\"Please choose the correct format!\")\n    if (type \u003d\u003d\u003d TemplateType.Custom \u0026\u0026 !Object.keys(args).length)\n      throw new Error(\"Unable to process customized template as no argument is provided\")\n    let sheet \u003d this.insertSheet(sheetName);\n    switch (type) {\n      case TemplateType.Availability:\n        sheet.createAvailabilityTemplate(sheetName);\n        onOpenSpreadsheetTrigger(this.spreadsheet, \"createAvailMenu\");\n        onOpenSpreadsheetTrigger(this.spreadsheet, \"createMonthlyAvailSpreadsheet\");\n        break;\n      case TemplateType.Roster:\n        sheet.createRosterTemplate(sheetName);\n        onOpenSpreadsheetTrigger(this.spreadsheet, \"createMonthlyRosterSpreadsheet\");\n        onOpenSpreadsheetTrigger(this.spreadsheet, \"createRosterMenu\");\n        break;\n      case TemplateType.Timesheet:\n        sheet.createTimesheetTemplate();\n        break;\n      case TemplateType.Individuals:\n        sheet.createIndividualTemplate(sheetName);\n        break;\n      default:\n        throw new SyntaxError(\"There is an issue taking in the parameter: (type)!\");\n    }\n    return sheet;\n  }\n\n /**\n   * Insert Data to Sheet\n   * @params {TemplateType} type: A Fixed List that detects type of template to generate\n   * @params {string} sheetName: Name of the Sheet\n   * @params {JSON} args: Arguments for creation of Timesheet Data OR Availability\n   * \n   * Timesheet Data Sample:\n   * [{\n   *   id: \"OTH #2023-001\"\n   *   crew : [\n   *           {\n   *            id: 1,\n   *            name: \"David\",\n   *            role: [\"IC\",\"Usher\"],\n   *            date: [\"1 June\",\"2 June\"]\n   *           },\n   *           {\n   *            id: 3,\n   *            name: \"Aaron\",\n   *            role: [\"IC\"],\n   *            date: [\"1 June\"]\n   *           },\n   *          ]\n   *         } \n   * }\n   * ]\n   * \n   * Availability Data Sample:\n   * [\n   *  {id: 1 , name: \"David\" ,data: [\u0027Available\u0027,\u0027Not Available\u0027]},\n   *  {id: 2 , name: \"Yi Xin\" ,data: [\u0027Not Available\u0027,\u0027Not Available\u0027]},\n   *  {id: 3 , name: \"Aaron\" ,data: [\u0027Available\u0027,\u0027Available\u0027]}\n   * ]\n   * @returns {Sheet} sheet : A new Object of Sheet;\n   */\n  insertDataToSheet(type \u003d TemplateType, sheetName, args \u003d []) {\n    if ((!type) \u0026\u0026 typeof sheetName !\u003d\u003d \"string\")\n      throw new TypeError(\"Please choose the correct format!\")\n    let foundSheet \u003d this.spreadsheet.getSheets().find(sheet \u003d\u003e sheet.getName() \u003d\u003d\u003d sheetName);\n    if (!foundSheet)\n      throw new Error(\"Unable to find the sheet Name. Please ensure that the sheet name is correct!\");\n    let sheet \u003d new Sheet(foundSheet);\n    switch (type) {\n      case TemplateType.Availability:\n        sheet.insertAvailabilityData(args);\n        break;\n      case TemplateType.Roster:\n        let year \u003d dateHelper.getYear();\n        let rootFolder \u003d folder.retrieveFolderByName(`ESS ${year}`)\n        let masterFile \u003d file.retrieveFileByName(\"Event Crew\");\n        let masterSS \u003d new Spreadsheet(SpreadsheetApp.open(masterFile));\n        let masterSheet \u003d masterSS.getSheet(\"Sheet1\");\n        sheet.insertRosterData(\"Yearly Availability\", masterSheet, rootFolder, sheetName);\n        break;\n      case TemplateType.Timesheet:\n        sheet.insertTimesheetData(args);\n        break;\n      default:\n        throw new SyntaxError(`There is an issue taking in the parameter: ${type}!`);\n    }\n    return sheet;\n\n\n  }\n}"},{"id":"4ac2cd2b-992c-4e17-84a2-7359dce5f3b9","name":"DateHelper","type":"server_js","source":"/**\n* Purpose: 1. Used to generate all data related to dates\n*          2. Reduce memories used from creation of new Object\n*          3. Reduce amount of Global Functions\n*/\nconst d \u003d new Date();\nconst MAX_TIME_INTERVAL \u003d 240000;\nconst months \u003d [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst dateHelper \u003d class {\n\n  /**\n   * Get Current Dates\n   * @return {numeric, numeric, numeric} date, month, year : The Current Dates \n   */\n  static getCurrentDates() {\n    const month \u003d d.getMonth();\n    const date \u003d d.getDate();\n    const year \u003d d.getFullYear();\n    return {date, month, year};\n  }\n\n  /**\n   * Get Date\n   * @params {string} datestring: User input date\n   * @return {string} date and month\n   */\n  static getDate(datestring \u003d \"\") {\n    if (typeof datestring !\u003d\u003d \"string\" \u0026\u0026 !datestring instanceof Date)\n      throw new TypeError(\"There is some errors in converting to string format!\");\n    let date \u003d !datestring ? d : new Date(datestring);\n    let dates \u003d date.getDate();\n    let month \u003d months[date.getMonth()].slice(0,3);\n    return `${dates} ${month}`;\n  }\n  /**\n   * Get Next Month\n   * @return {string} month: Return Name of the month;\n   */\n  static getNextMonth() {\n    let nextMonth \u003d new Date(d.getFullYear(),d.getMonth() + 1,1).getMonth();\n    return months[nextMonth];\n  }\n\n  /**\n   * Get Month Name.\n   * @params {string} datestring: User input date\n   * @return {string} return name of month.\n   * @return {string} return current month name if datestring is empty.\n   * @error returns error if wrong type of input\n   */\n  static getMonthName(datestring \u003d \"\") {\n    if (typeof datestring !\u003d\u003d \"string\" \u0026\u0026 !datestring instanceof Date)\n      throw new TypeError(\"There is some errors in converting to string format!\");\n    if (!datestring) {\n      console.log(\"Getting current month\");\n      return d.toLocaleString(\u0027en-US\u0027, { month: \u0027long\u0027 });\n    }\n    let date \u003d Date.parse(datestring);\n    return date.toLocaleString(\u0027en-US\u0027, { month: \"long\" });\n  }\n  /**\n   * Get Year.\n   * @params {string} datestring: User input date\n   * @return {string} return year.\n   * @return {string} return current year if datestring is empty.\n   * @error returns error if wrong type of input\n   */\n  static getYear(datestring \u003d \"\") {\n    if (typeof datestring !\u003d\u003d \"string\" \u0026\u0026 !datestring instanceof Date)\n      throw new TypeError(\"There is some errors in converting to string format!\");\n    if (!datestring) {\n      console.log(\"Getting current year\");\n      return d.toLocaleString(\u0027en-US\u0027, { year: \u0027numeric\u0027 });\n    }\n    let date \u003d Date.parse(datestring);\n    return date.toLocaleString(\u0027en-US\u0027, { year: \"numeric\" });\n  }\n\n  /**\n   * Get Number of days in the specific month\n   * @params {string} month: User inputted month\n   * @return {Array} return number of days in the month\n   * @error returns error if wrong type of input\n   */\n  static getDaysInMonth(month \u003d \"\") {\n    if (typeof month !\u003d\u003d \"string\" \u0026\u0026 !month instanceof Date)\n      throw new TypeError(\"There is some errors in converting to string format!\");\n    if (month \u003d\u003d\u003d \"\")\n      month \u003d this.getMonthName().slice(0,3);\n    let shortMonths \u003d months.map(x \u003d\u003e x.slice(0,3));\n    let monthIndex \u003d shortMonths.findIndex(shortMon \u003d\u003e shortMon \u003d\u003d\u003d month);\n    if (monthIndex \u003d\u003d -1)\n      throw new Error(\"Month is not in the correct name \" + month);\n    let year \u003d d.getFullYear();\n    return new Date(year,monthIndex+1,0).getDate()\n  }\n\n  /**\n   * Get Next Year\n   * @return {Date} returns the End of Next Year\n   */\n  static getNextYear() {\n    return new Date(this.getYear() + 1, 1, 1);\n  }\n\n  static getYearEnd() {\n    return new Date(this.getYear(),11,10);\n  }\n}"},{"id":"ccea514d-b0b8-4622-974a-f8edc1d07dcd","name":"File","type":"server_js","source":"const file \u003d class {\n  /**\n * Retrieve a specific File By Name\n * Does not check the based on the parent folder\n * @params {string} fileName : Name of the specific file\n * @params {Folder} rootFolder : The Parent Folder which the specific file exist in\n * @returns {file} returns first file or null if unable to retrieve folder\n */\n  static retrieveFileByName(fileName, rootFolder \u003d \"\") {\n    if (typeof fileName !\u003d\u003d \"string\" || (rootFolder \u0026\u0026 !rootFolder instanceof Object))\n      throw new TypeError(\"There is some errors in retrieving the file!\"); \n    if (!rootFolder) {\n      var fileIterator \u003d DriveApp.getFilesByName(fileName)\n      var file \u003d fileIterator.hasNext() ? fileIterator.next() : null;\n    }\n    else\n      file \u003d miscTools.recursiveSearchFile(fileName,rootFolder);\n      return file;\n  }\n  /**\n   * Creates File to Folder\n   * @params {string} fileName: Name of the file\n   * @params {Folder} rootFolder: The Parent Folder which the specific file is being created\n   * @returns {file} returns the file that have been created\n   */\n  static createSpreadsheetToFolder(fileName, rootFolder \u003d \"\") {\n    if (typeof fileName !\u003d\u003d \"string\" || (rootFolder \u0026\u0026 !rootFolder instanceof Object))\n      throw new TypeError(\"There is some errors in retrieving the file!\");\n    let ss \u003d SpreadsheetApp.create(fileName);\n    !rootFolder ? DriveApp.getFileById(ss.getId()) : DriveApp.getFileById(ss.getId()).moveTo(rootFolder);\n    return ss;\n  }\n\n}"},{"id":"389d0a96-d5b0-42d7-975e-a08b5108167e","name":"Folder","type":"server_js","source":"const folder \u003d class {\n  /**\n   * Generate Whole Folder Hierarchy\n   * Only Creates Subfolders within the root directory\n   * @params {Array of Object} subFolders: An array that contains the parent folder name and a list of subdirectories\u0027 name\n   * subFolder Example: {parentFolder: rootFolderName, subDirectories: [folder1,folder2,folder3], args: {parentFolder : folder1, subDirectories: [folder4], args: {...args}}} \n   * @params {Folder} rootFolder: Parent Folder of the Folder Hierarchy\n   */\n  static generateFolderHierarchy(subFolder, rootFolder \u003d \"\") {\n    if ((!subFolder instanceof Object || (rootFolder \u0026\u0026 !rootFolder instanceof Object)))\n      throw new TypeError(\"Invalid input. Ensure that subFolder follows the format!\");\n    console.log(\"Retrieving From Master Folder\");\n    let parent \u003d !rootFolder ? this.retrieveFolderByName(subFolder.parentFolder) : this.retrieveFolderByName(subFolder.parentFolder, rootFolder);\n    console.log(\"Creating Parent Folder\");\n    if (!parent)\n      parent \u003d !rootFolder ? DriveApp.createFolder(subFolder.parentFolder) : rootFolder.createFolder(subFolder.parentFolder);\n    var folderArray \u003d [];\n    console.log(\"Creating Sub Directories\")\n    subFolder.subDirectories.forEach(name \u003d\u003e {\n      let child \u003d this.retrieveFolderByName(name, parent);\n      !child ?\n        folderArray.push(parent.createFolder(name)) :\n        folderArray.push(child);\n    });\n    let args \u003d subFolder.args;\n    if (!args)\n      return;\n    console.log(\"Creating Directories within Sub Directories\")\n    miscTools.recursiveFolderCreation(args, folderArray);\n  }\n\n  /**\n * Retrieve a specific Folder By Name\n * Does not check the based on the parent folder\n * @params {string} folderName : Name of the specific folder\n * @params {Folder} rootFolder : The Parent Folder which the specific folder exist in\n * @returns {Folder} returns first folder or null if unable to retrieve folder\n */\n  static retrieveFolderByName(folderName, rootFolder \u003d \"\") {\n    if (typeof folderName !\u003d\u003d \"string\" || (rootFolder \u0026\u0026 !rootFolder instanceof Object))\n      throw new TypeError(\"There is some errors in retrieving the folder!\");\n    if (!rootFolder) {\n      var folderIterator \u003d DriveApp.getFoldersByName(folderName)\n      var folder \u003d folderIterator.hasNext() ? folderIterator.next() : null;\n    }\n    else\n      folder \u003d miscTools.recursiveSearchFolder(folderName, rootFolder);\n    return folder;\n  }\n\n  /**\n * Retrieve all files\n * @params {folder} rootFolder: The folder that contains all the spreadsheets \n * @return {Array[File]} return an array of files within the folder \n */\n  static retrieveAllSpreadsheetsInFolder(rootFolder) {\n    if (!rootFolder instanceof Object)\n      throw new TypeError(\"There is some errors in the parameter: rootFolder is not in the right format!\");\n    let files \u003d [];\n    let iterator \u003d rootFolder.getFilesByType(MimeType.GOOGLE_SHEETS);\n    while (iterator.hasNext()) {\n      files.push(iterator.next());\n    }\n    return files;\n  }\n\n  /**\n   * Retrieve Folder Hierarchy of specific folder\n   * @params {Folder} rootFolder: Targeted Folder\n   * @return {Objects} return as an JSON formatted Object\n   * Return Value Example: {id: rootFolderID, name:rootFolderName, subDirectories: {id: folder1ID, name: folder1Name, subDirectories: {...args}}} \n   */\n  static retrieveFolderHierarchy(rootFolder) {\n    if (!rootFolder instanceof Object)\n      throw new TypeError(\"There is some errors in the parameters: rootFolder is not in the right format!\");\n    return miscTools.recursiveFolder(rootFolder);\n  }\n}"},{"id":"b146471d-3f27-472a-99ab-c1df807ba758","name":"MiscTools","type":"server_js","source":"/**\n * Encapsulation of miscallenous functions\n * Purpose : To ensure that there is no wrong usage of functions (Bypass)\n */\nconst miscTools \u003d class {\n  /**\n   * Recursive Function to iterate every folders within Sub Directories and create new folders \n   * @params {Object} args: Sub Directories that contains the parent folder,direct sub directories and nested sub directories\n   * @params {Array} folderArray: The list of parent folders\n   * Does not return any values\n   * Does not throw any errors due to recursion\n   */\n  static recursiveFolderCreation(args, folderArray) {\n    if (!args.length)\n      return;\n    for (const data of args) {\n      let childName \u003d data.parentFolder;\n      let childSubFolders \u003d data.subDirectories;\n      let nestedData \u003d data.args;\n      let folder \u003d folderArray.find(folder \u003d\u003e folder.getName() \u003d\u003d\u003d childName);\n      if (!folder)\n        continue;\n      var childArray \u003d [];\n      childSubFolders.forEach(name \u003d\u003e {\n        let child \u003d folderGenerator.retrieveFolderByName(name, folder);\n        (!child) ?\n          childArray.push(folder.createFolder(name)) :\n          childArray.push(child);\n      });\n      if (!nestedData)\n        continue;\n      this.recursiveFolderCreation(nestedData, childArray);\n    }\n  }\n  /**\n   * Recursive Function to iterate every folders within Sub Directories\n   * @params {Folder} parentFolder: The Parent Folder\n   * @return {object} folderHierarchy: A nested JSON Object \n   * Example: {parentFolder: rootFolderID, subDirectories: [folder1ID,folder2ID,folder3ID], args: {parentFolder : folder1ID, subDirectories: [folder4ID], args: {...args}}} \n   */\n  static recursiveFolder(parentFolder) {\n    if (!parentFolder)\n      return;\n    let folderHierarchy \u003d { id: parentFolder.getId(), name: parentFolder.getName(), subDirectories: [] };\n    let subFolderIterator \u003d parentFolder.getFolders();\n    while (subFolderIterator.hasNext()) {\n      let subFolder \u003d subFolderIterator.next();\n      folderHierarchy.subDirectories.push(this.recursiveFolder(subFolder));\n    }\n    return folderHierarchy;\n  }\n\n  /**\n   * Recursive Function to iterate every folders to find file with specific file name\n   * @params {string} fileName: Name of the file\n   * @params {Folder} parentFolder: The root Folder which is being searched \n   * @return {File} null if nothing is found, else return the file\n   */\n  static recursiveSearchFile(fileName, parentFolder) {\n    if (!parentFolder)\n      return null;\n    let fileIterator \u003d parentFolder.getFilesByName(fileName);\n    while (fileIterator.hasNext())\n      return fileIterator.next();\n    let subFolderIterator \u003d parentFolder.getFolders();\n    while (subFolderIterator.hasNext()) {\n      let subFolder \u003d subFolderIterator.next();\n      let file \u003d this.recursiveSearchFile(fileName, subFolder);\n      if (file)\n        return file;\n    }\n    return null;\n  }\n\n  /**\n * Recursive Function to iterate every folders to find folder with specific folder name\n * @params {string} folderName: Name of the folder\n * @params {Folder} parentFolder: The root Folder which is being searched \n * @return {Folder} null if nothing is found, else return the folder\n */\n  static recursiveSearchFolder(folderName, parentFolder) {\n    if (!parentFolder)\n      return null;\n    if (String(parentFolder.getName()) \u003d\u003d\u003d String(folderName))\n      return parentFolder;\n    let subFolderIterator \u003d parentFolder.getFolders();\n    while (subFolderIterator.hasNext()) {\n      let subFolder \u003d subFolderIterator.next();\n      let folder \u003d this.recursiveSearchFolder(folderName, subFolder);\n      if (folder)\n        return folder;\n    }\n    return null;\n  }\n}\n\n\n/**\n * Global Constant Variables\n */\nconst cache \u003d CacheService.getScriptCache();\n\nconst properties \u003d PropertiesService.getScriptProperties();\n"},{"id":"d0174184-9841-4e75-9461-5cac5583235c","name":"ErrorHandler","type":"server_js","source":"class ErrorHandler {\n  constructor(ui) {\n    this.ui \u003d ui;\n  }\n\n  /**\n   * Insert Error Log into Spreadsheet\n   * @params {Error} error: Error received\n   */\n  static insertErrorLog(error) {\n    let year \u003d dateHelper.getYear();\n    let masterFolder \u003d folder.retrieveFolderByName(\"ESS Main Folder\");\n    let yearFolder \u003d folder.retrieveFolderByName(`ESS ${year}`,masterFolder);\n    let fileSS \u003d file.retrieveFileByName(\"Error Log\",yearFolder) ? SpreadsheetApp.open(file.retrieveFileByName(\"Error Log\",yearFolder)) : file.createSpreadsheetToFolder(\"Error Log\",yearFolder);\n    let ss \u003d new Spreadsheet(fileSS);\n    let sheet \u003d ss.getSheet(\"Sheet1\");\n    sheet.sheet.appendRow([error.stack,error]);\n  }\n\n  /**\n   * Create Alert Using Spreadsheet UI\n   * @params {Error} error: Error received\n   */\n  createAlert(error) {\n    const button \u003d this.ui.ButtonSet.OK_CANCEL;\n    console.log(error);\n    switch (error) {\n      case SyntaxError:\n      case ReferenceError:\n      case TypeError:\n        console.log(error.stack);\n        this.ui.alert(\"Error\",\"Internal Error. Please wait for awhile and try again later!\",button);\n        break;\n      case RangeError:\n        console.log(error.stack);\n        this.ui.alert(\"Error\",\"Please ensure that the HEADER NAMING CONVENTION HAS NOT CHANGED\",button);\n        break;\n      default:\n        console.log(error.stack);\n        this.ui.alert(\"Error\", error,button);\n    }\n  }\n}"},{"id":"917d25f4-c1ef-4fba-b404-28f785592c94","name":"Sheet","type":"server_js","source":"class Sheet {\n  constructor(sheet) {\n    this.sheet \u003d sheet\n  }\n\n  /**\n * Get All Data from the specific Sheet\n * \n * @returns {2D Array} Returns all values\n * Example: [\n *           [\"Refresh Data\",\"Generate Data\"],\n *           [\"no\",\"no\",\"ESS Roster Sheet\",\"\",...].\n *           [\"ESS ID\",\"Name\"],\n *           ...\n *          ]\n */\n  getAllData() {\n    let range \u003d this.sheet.getDataRange();\n    return range.getValues();\n  }\n\n  /**\n   * Get the Header of the Spreadsheet\n   * @params {string} headerValue: Retrieve Header Value\n   * @return {index, colIndex} returns the row and column of the index\n   * Date Sample:\n   * [\n   * {rowIndex: 0, colIndexes: [1,2,3,4]}\n   * ]\n   */\n  getHeader(headerValue) {\n    let allData \u003d this.getAllData();\n    return allData.map((row, rowIndex) \u003d\u003e {\n      let colIndexes \u003d row.map((value, colIndex) \u003d\u003e {\n        if (value \u003d\u003d\u003d headerValue)\n          return colIndex;\n      })\n        .filter(value \u003d\u003e value !\u003d\u003d undefined);\n      if (colIndexes.length)\n        return { rowIndex, colIndexes };\n    }).filter(data \u003d\u003e data !\u003d\u003d undefined);\n  }\n\n  /**\n   * Insert Data into Sheet\n   * @params {numbers} startingRowIndex: Row Index\n   * @params {numbers} startingColIndex: Column Index\n   * @params {numbers} numsRow: Number of Rows\n   * @params {numbers} numsCol: Number of Columns\n   * @params {2D Array} data: Values of the specific cell\n   * data Example: [\n   *                [\"Header1\",\"Header2\"],\n   *                [\"Data1\",\"Data2\"]\n   *               ]\n   * @params {Array} ...args: Represent any leftover parameters\n   * ...args Current Parameters:\n   *         [0]: {Boolean} setBold: set bold\n   *         [1]: {Boolean} setMerge: set merged range  \n   *         [2]: {Boolean} setCheckbox :set specific cell to checkbox\n   *         [3]: {Boolean} setCenterAlignment:  center alignment cell \n   *         [4]: {Boolean} setWrap: set text wrap\n   * @return {Range} returns the specific range from Starting Row Index \u0026 Column Index\n   */\n  insertData(startingRowIndex, startingColIndex, numsRow, numsCol, data, ...args) {\n    if (typeof startingRowIndex !\u003d\u003d \"number\" || typeof startingColIndex !\u003d\u003d \"number\")\n      throw new TypeError(\"An incorrect type have been entered! : Ensure that startingRowIndex \u0026 startingColIndex is numeric\");\n    var range \u003d this.sheet.getRange(startingRowIndex, startingColIndex, numsRow, numsCol);\n    if (data.length)\n      range.setValues(data);\n    if (args.length) {\n      var setBold \u003d args[0]\n      var setMerge \u003d args[1];\n      var setCheckbox \u003d args[2];\n      var setCentered \u003d args[3];\n      var setWrap \u003d args[4];\n      if (setBold !\u003d\u003d undefined \u0026\u0026 setBold)\n        range.setFontWeight(\"bold\");\n      if (setMerge !\u003d\u003d undefined \u0026\u0026 setMerge)\n        range.merge();\n      if (setCheckbox !\u003d\u003d undefined \u0026\u0026 setCheckbox)\n        range.insertCheckboxes(\"yes\", \"no\");\n      if (setCentered !\u003d\u003d undefined \u0026\u0026 setCentered)\n        range.setHorizontalAlignment(\"center\");\n      if (setWrap !\u003d\u003d undefined \u0026\u0026 setWrap)\n        range.setWrap(true);\n    }\n    return range;\n  }\n\n  /**\n   * Insertion of Data Validation\n   * @params {numbers} startingRowIndex: Row Index\n   * @params {numbers} startingColIndex: Column Index\n   * @params {numbers} numsRow: Number of Rows\n   * @params {numbers} numsCol: Number of Columns\n   * @params {Array} validationData : List of Values for Data Validation\n   * Example of validationData: [\"Data1\",\"Data2\",\"Data3\"]\n   * @returns {Range} returns range\n   */\n  insertDataValidation(startingRowIndex, startingColIndex, validationData, numsRow, numsCol) {\n    if (typeof startingRowIndex !\u003d\u003d \"number\" || typeof startingColIndex !\u003d\u003d \"number\" \u0026\u0026 (!Array.isArray(validationData)))\n      throw new TypeError(\"An incorrect type have been entered! : Ensure that startingRowIndex \u0026 startingColIndex is numeric and validationData is an array\");\n    var rule \u003d\n      SpreadsheetApp.newDataValidation()\n        .requireValueInList(validationData)\n        .build();\n    var range \u003d this.sheet.getRange(startingRowIndex, startingColIndex, numsRow, numsCol);\n    return range.setDataValidation(rule);\n  }\n\n  /**\n   * Generate Availability Template\n   * Inserts Checkboxes, Headers and Dates\n   * Does not insert Personal Data\n   * @params {string} monthName: Name of the month\n   */\n  createAvailabilityTemplate(monthName \u003d \"\") {\n    if (typeof monthName !\u003d\u003d \"string\")\n      throw new TypeError(\"Ensure that name of the month is in string format\");\n    console.log(\"Inserting Header\");\n    this.insertData(2, 1, 1, 2, [[\"ESS ID\", \"Name\"]], true);\n\n    console.log(\"Inserting Dates\");\n    if (monthName \u003d\u003d\u003d \"\") {\n      monthName \u003d dateHelper.getMonthName();\n      var days \u003d dateHelper.getDaysInMonth();\n    } else\n      days \u003d dateHelper.getDaysInMonth(monthName);\n    let dateData \u003d [Array.from({ length: days }, (_, i) \u003d\u003e `${i + 1} ${monthName}`)];\n    let emptyCol \u003d Array.from({ length: days - 1 }, x \u003d\u003e \"\");\n    this.insertData(2, 3, 1, days, dateData, true);\n    this.insertData(1, 3, 1, days, [[\"Date\"].concat(emptyCol)], true, true, false);\n  }\n\n  /**\n   * Generate Roster Template\n   * Inserts Checkboxes, Headers, Dates, SubHeader of Dates and Data Validation\n   * Does not insert Personal Data\n   * @params {string} monthName: Name of the month\n   */\n  createRosterTemplate(monthName \u003d \"\") {\n    if (typeof monthName !\u003d\u003d \"string\")\n      throw new TypeError(\"Ensure that name of the month is in string format\");\n    console.log(\"Inserting Headers\");\n    this.insertData(2, 1, 1, 4, [[\"ESS ID\", \"Name\", \"Mobile\", \"Indicate the area that you are living in. (e.g. Jurong, Sengkang, Woodlands, Tampines, etc)\"]], true, false, false, true, true);\n    this.insertData(1, 1, 1, 4, [[\"ESS Roster Sheet\", \"\", \"\", \"\"]], true, true);\n\n    console.log(\"Inserting Dates with Sub Headers\");\n    if (monthName \u003d\u003d\u003d \"\") {\n      monthName \u003d dateHelper.getMonthName();\n      var days \u003d dateHelper.getDaysInMonth();\n    } else {\n      days \u003d dateHelper.getDaysInMonth(monthName);\n    }\n    var dateHeaderData \u003d [...Array(days)];\n    dateHeaderData.fill([\n      \"Availability\",\n      \"Partially Available (e.g. Free Till 3pm OR Free AFTER 3pm.)\",\n      \"Rostered Role\",\n      \"Rostered For (Event Name)\",\n      \"Event ID\"\n    ]);\n    this.insertData(2, 5, 1, days * 5, [dateHeaderData.flat()], true, false, false, true, true);\n\n    console.log(\"Inserting Data Validation Rules\");\n    let dataValidation \u003d [\"Available\", \"Not Available\", \"Others\"];\n    for (let i \u003d 1; i \u003c\u003d dateHeaderData.length; i++) {\n      let borderedRange \u003d this.sheet.getRange(1, i * 5, 999, 1);\n      borderedRange.setBorder(null, true, null, null, null, null);\n      this.insertDataValidation(3, i * 5, dataValidation, 500, 1);\n\n      this.insertData(1, i * 5, 1, 5, [[`${i} ${monthName}`, \"\", \"\", \"\", \"\"]], true, true, false, true, true);\n    }\n  }\n\n  /**\n   * Generate Timesheet Template\n   * Inserts Headers, Dates\n   */\n  createTimesheetTemplate() {\n    let placeholder \u003d Array.from({ length: 99 }, (x) \u003d\u003e [\"\"]);\n    console.log(\"Inserting Headers\");\n    this.insertData(1, 1, 1, 5, [\n      [\"Input Event Code (Refer to Master Account Sheet)\", \"\", \"\", \"\", \"\"]\n    ], true, true, false, true, true)\n      .setBorder(true, true, true, true, null, null)\n      .setBackground(\"#93ccea\");\n\n    this.insertData(2, 1, 1, 5, [[\"Valuation Data (Refer to Bank Statement)\", \"\", \"\", \"\", \"\"]], true, true, false, true, true)\n      .setBorder(true, true, true, true, null, null)\n      .setBackground(\"#a4c2f4\");\n\n    this.insertData(3, 1, 1, 5, [[\"Done By (Input your Name)\", \"\", \"\", \"\", \"\"]], true, true, false, true, true)\n      .setBorder(true, true, true, true, null, null)\n      .setBackground(\"#a4c2f4\");\n\n    let approval \u003d [\"P. Approval\", \"Approval\"];\n    let invoice \u003d [\"Invoice Not Sent\", \"Invoice Sent\"];\n\n    this.insertDataValidation(1, 6, approval, 1, 1);\n    this.insertDataValidation(1, 7, invoice, 1, 1);\n\n    let rightHeader \u003d this.insertData(2, 6, 2, 1, [[\"\"], [\"(Input your Name)\"]], true, false, false, true, true);\n    let subHeader \u003d this.insertData(4, 1, 1, 16, [[\"\", \"No.\", \"ESS Serial No.\", \"Name\", \"Role\", \"Date\", \"Start Time\", \"End Time\", \"Duration\", \"Rate\", \"Amount\", \"Transport Claims\", \"Meals Claims\", \"ART Claims\", \"Amount\", \"Remarks\"]], true, false, false, true, true);\n\n    console.log(\"Inserting Borders \u0026 Colors\");\n    rightHeader.setBorder(true, true, true, true, null, null);\n    rightHeader.setBackground(\"#93c47d\");\n\n    subHeader.setBorder(true, true, true, true, true, true);\n    // HexaColor for Light Cornflower Blue\n    subHeader.setBackground(\"\t#a4c2f4\");\n\n    console.log(\"Inserting Columns for Users\")\n    let duration \u003d this.insertData(5, 9, 100, 1, [[\"\"], ...placeholder], false, false, false, true, true);\n    duration.setFormulaR1C1(\"\u003d(INT(R[0]C[-1]/100)+(MOD(R[0]C[-1],100)/60))-(INT(R[0]C[-2]/100)+(MOD(R[0]C[-2],100)/60))\");\n\n    console.log(\"Inserting Data Validation\");\n    let hourlyRate \u003d [12, 14, 18, 20];\n    this.insertDataValidation(5, 10, hourlyRate, 100, 1);\n\n    let rateTotal \u003d this.insertData(5, 11, 100, 1, [[\"\"], ...placeholder], false, false, false, true, true);\n    rateTotal.setFormulaR1C1(\"\u003dR[0]C[-1]*R[0]C[-2]\")\n      .setNumberFormat(\"$0.00\");\n\n    let totalAmounts \u003d this.insertData(5, 15, 100, 1, [[\"\"], ...placeholder]);\n    totalAmounts.setFormulaR1C1(\"\u003dR[0]C[-1]+R[0]C[-2]+R[0]C[-3]+R[0]C[-4]\")\n      .setNumberFormat(\"$0.00\");\n\n    console.log(\"Inserting Column Header\");\n    this.insertData(5, 1, 100, 1, [[\"Enter Event Title (Refer to Master Account Sheet)\"], ...placeholder], true, true, false, true, true);\n\n    console.log(\"Inserting Footer\");\n    let footer \u003d this.insertData(105, 1, 1, 16, [[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]]);\n    footer.setBackground(\"#a4c2f4\");\n\n    console.log(\"Inserting Total Amounts\");\n    this.insertData(106, 10, 1, 1, [[\"Total\"]], true)\n      .setBackground(\"#a4c2f4\")\n      .setBorder(true, true, true, true, null, null);\n    let totalSum \u003d this.insertData(106, 11, 1, 1, [[\"\"]], true);\n    totalSum.setFormulaR1C1(\"\u003dSUM(R[-102]C[0]:R[-2]C[0])\")\n      .setBorder(true, true, true, true, null, null)\n      .setNumberFormat(\"$0.00\");\n\n    console.log(\"Inserting Total with Claims\");\n    this.insertData(106, 14, 1, 1, [[\"Total Claims\"]], true)\n      .setBackground(\"#a4c2f4\")\n      .setBorder(true, true, true, true, null, null);\n    let totalClaims \u003d this.insertData(106, 15, 1, 1, [[\"\"]], true);\n    totalClaims.setFormulaR1C1(\"\u003dSUM(R[-102]C[0]:R[-2]C[0])\")\n      .setBorder(true, true, true, true, null, null)\n      .setNumberFormat(\"$0.00\");\n\n    console.log(\"Inserting Row Example\");\n    this.insertData(108, 2, 1, 15, [[\"\", \"\", \"\", \"Copy Paste this whole row for every New Entries/Rows or inserts last row\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", 0]], true, false, false, false, true)\n      .setBorder(true, true, true, true, null, null);\n\n    console.log(\"Inserting Formulas for Duration\");\n    let sampleDurations \u003d this.insertData(108, 9, 1, 1, [[\"\"]], false, false, false, true, true);\n    sampleDurations.setFormulaR1C1(\"\u003d(INT(R[0]C[-1]/100)+(MOD(R[0]C[-1],100)/60))-(INT(R[0]C[-2]/100)+(MOD(R[0]C[-2],100)/60))\");\n\n    console.log(\"Inserting Formulas for Total Rate Amount\");\n    let samplerateTotal \u003d this.insertData(108, 11, 1, 1, [[\"\"]], false, false, false, true, true);\n    samplerateTotal.setFormulaR1C1(\"\u003dR[0]C[-1]*R[0]C[-2]\")\n      .setNumberFormat(\"$0.00\");\n\n    console.log(\"Inserting Formulas for Total Amount\");\n    let sampletotalAmounts \u003d this.insertData(108, 15, 1, 1, [[\"\"]]);\n    sampletotalAmounts.setFormulaR1C1(\"\u003dR[0]C[-1]+R[0]C[-2]+R[0]C[-3]+R[0]C[-4]\")\n      .setNumberFormat(\"$0.00\");\n\n\n    console.log(\"Inserting Border for all Rows\");\n    var dataRange \u003d this.sheet.getRange(4, 1, 102, 16);\n    dataRange.setBorder(true, true, true, true, true, true);\n  }\n\n  /**\n   * Create Template for Individual Spreadsheet\n   * @param {string} datestring: Name of the sheet\n   */\n  createIndividualTemplate(datestring \u003d \"\") {\n    if (typeof datestring !\u003d\u003d \"string\")\n      throw new TypeError(\"Ensure that name of the month is in string format\");\n    let month, year;\n    if (datestring) {\n      [month, year] \u003d datestring.split(\" \");\n      month \u003d month.slice(0, 3);\n    } else {\n      month \u003d dateHelper.getMonthName().slice(0, 3);\n      year \u003d dateHelper.getYear();\n    }\n    let days \u003d dateHelper.getDaysInMonth(month);\n    let array \u003d Array.from({ length: days }, (_, i) \u003d\u003e `${i + 1} ${month} ${year}`);\n    console.log(\"Inserting Template Header\");\n    this.insertData(1, 1, 1, 2, [[\"Date\", \"Availability\"]], true);\n\n    let dataArray \u003d array.map(value \u003d\u003e [value]);\n    console.log(\"Inserting Data Validation\");\n    let dataValidation \u003d [\"Available\", \"till 3pm\", \"after 3pm\", \"Not Available\"];\n    this.insertData(2, 1, array.length, 1, dataArray);\n    this.insertDataValidation(2, 2, dataValidation, array.length, 1);\n    SpreadsheetApp.flush();\n  }\n\n  /**\n   * Append Data to the Spreadsheet\n   * @param {Array of JSON} externalData: Values retrieved from other Spreadsheet\n   * @param {Array} dataValue: Values retrieved from current Sheet\n   * @param {boolean} canReplace: Value that can replace other value;\n   */\n  appendData(externalData, dataValue, canReplace \u003d false) {\n    // Find All ID from the current spreadsheet\n    let dataIDs \u003d dataValue.map(val \u003d\u003e val[0]);\n    let foundData \u003d externalData.filter(dataRow \u003d\u003e dataIDs.includes(parseInt(dataRow.id)));\n    if (foundData.length) {\n      console.log(\"Inserting Modification Data\");\n      let headerLength \u003d 2;\n\n      let modifyData \u003d foundData.map(val \u003d\u003e [...Object.values(val)].flat().slice(headerLength));\n      let currentData \u003d dataValue.map(data \u003d\u003e data.slice(headerLength));\n      if (!canReplace) {\n        currentData.forEach((row,rowIndex) \u003d\u003e {\n          modifyData[rowIndex] \u003d row.map((val, col) \u003d\u003e (val \u003d\u003d\u003d \"\" \u0026\u0026 modifyData[rowIndex][col] ? modifyData[rowIndex][col] : val));\n        })\n      } \n      this.insertData(3, headerLength + 1, modifyData.length, modifyData[0].length, modifyData);\n\n    }\n    let lastRow \u003d this.sheet.getLastRow();\n    console.log(\"Appending New Data\");\n    let appendData \u003d externalData.filter(data \u003d\u003e !foundData.includes(data)).map(value \u003d\u003e [...Object.values(value)].flat());\n    if (appendData.length)\n      this.insertData(lastRow + 1, 1, appendData.length, appendData[0].length, appendData);\n    return;\n  }\n\n  /**\n   * Update Availability Data by Pulling in data\n   * @params {string} sheetName: Name of the Sheet\n   * @params {Array} args: Data in which Availability Spreadsheet Require to Service\n   * [\n   *  {id: 1 , name: \"David\" ,data: [\u0027Available\u0027,\u0027Not Available\u0027]},\n   *  {id: 2 , name: \"Yi Xin\" ,data: [\u0027Not Available\u0027,\u0027Not Available\u0027]},\n   *  {id: 3 , name: \"Aaron\" ,data: [\u0027Available\u0027,\u0027Available\u0027]}\n   * ]\n   */\n  insertAvailabilityData(args\u003d[]) {\n    if ((args \u0026\u0026 !args instanceof Array))\n      throw new TypeError(\"Invalid inputs. Please ensure that all the parameters are in the correct format!\");\n    let availData \u003d args;\n    availData.sort((a, b) \u003d\u003e parseInt(a.id) - parseInt(b.id));\n    console.log(\"Checking Current Data\");\n    let ssDataValues \u003d this.getAllData();\n    ssDataValues \u003d ssDataValues.slice(2);\n    this.appendData(availData, ssDataValues, true);\n    return;\n  }\n\n  /**\n   * Update Roster Data by Pulling in data\n   * Retrieve Availability Data \n   * @params {string} fileName: Specific File Name that retrieve all Availability Data \n   * @params {Sheet} masterSheet: The master sheet which contains all info about Personnel  \n   * @params {Folder}  rootFolder: Root Folder which folderName resides (Can be empty)\n   * @params {string} monthName: Short Name of the Month which is to be inserted into  \n   */\n  insertRosterData(fileName, masterSheet, rootFolder \u003d \"\", monthName \u003d \"\") {\n    if (typeof fileName !\u003d\u003d \"string\" || (rootFolder \u0026\u0026 !rootFolder instanceof Object) || (monthName \u0026\u0026 typeof monthName !\u003d\u003d \"string\"))\n      throw new TypeError(\"Invalid inputs. Please ensure that all the parameters are in the correct format!\");\n    console.log(\"Checking Current Data\");\n    let ssDataValues \u003d this.getAllData();\n    let headerRow \u003d ssDataValues[0];\n    ssDataValues \u003d ssDataValues.slice(2);\n    let headerIndex \u003d headerRow.map((value, index) \u003d\u003e {\n      if (value !\u003d\u003d \"\")\n        return index\n    }).filter(value \u003d\u003e value !\u003d\u003d undefined);\n\n    console.log(\"Retrieving Personal Data\");\n    let availFile \u003d !rootFolder ?\n      file.retrieveFileByName(fileName) :\n      file.retrieveFileByName(fileName, rootFolder);\n    let availSS \u003d new Spreadsheet(SpreadsheetApp.open(availFile));\n    if (monthName \u003d\u003d\u003d \"\")\n      monthName \u003d dateHelper.getMonthName().slice(0, 3);\n    let availSheet \u003d availSS.getSheet(monthName);\n    if (!availSheet)\n      throw new Error(\"Unable to retrieve the sheet\");\n    let availData \u003d availSheet.getAllData();\n    if (!availData.length) {\n      console.log(\"Unable to retrieve any files\");\n      throw new Error(\"Empty Sheet is found\");\n    }\n    var partialAvailability \u003d [\"till 3pm\", \"after 3pm\"];\n    availData \u003d availData.slice(2);\n    let dataIDs \u003d availData.map(row \u003d\u003e row[0]);\n\n    console.log(\"Retrieving from Master Sheet\");\n    let personalData \u003d masterSheet.getAllData();\n    personalData.shift();\n    personalData \u003d personalData.filter(dataRow \u003d\u003e dataIDs.includes(dataRow[0]));\n    if (personalData.length) {\n      personalData \u003d personalData.map(row \u003d\u003e row.slice(2, 4));\n      availData \u003d availData.map((dataRow, index) \u003d\u003e {\n        return { id: dataRow[0], name: dataRow[1], mobile: personalData[index][0], location: personalData[index][1], data: dataRow.slice(2) }\n      }).filter(val \u003d\u003e val !\u003d\u003d undefined);\n    } else {\n      availData \u003d availData.map(dataRow \u003d\u003e {\n        return { id: dataRow[0], name: dataRow[1], data: dataRow.slice(2)}\n      });\n    }\n    availData.sort((a, b) \u003d\u003e a.id - b.id);\n    availData.forEach(dataRow \u003d\u003e {\n      headerIndex.forEach((header, i) \u003d\u003e {\n        let diff \u003d i \u003d\u003d\u003d headerIndex.length - 1 ? 0 : i \u003d\u003d\u003d 0 ? headerIndex[1] - headerIndex[0] : (headerIndex[i + 1] - header) - 1;\n        let emptyCol \u003d [...Array(diff).keys()].fill(\"\");\n        let startIndex \u003d i \u003d\u003d\u003d 0 ? header + 1 : header + 2;\n        dataRow.data.splice(startIndex, 0, ...emptyCol);\n        let avail \u003d dataRow.data[startIndex - 1];\n        if (partialAvailability.includes(avail)) {\n          dataRow.data[startIndex - 1] \u003d \"Others\";\n          dataRow.data[startIndex] \u003d avail;\n        }\n      })\n    })\n    this.appendData(availData, ssDataValues);\n  }\n/**\n  * Inserting Data into Timesheet\n  * @params {Array of JSON} args: Arguments for creation of Timesheet Data\n  * Data Sample:\n  * [{\n  *   id: \"OTH #2023-001\"\n  *   crew : [\n  *           {\n  *            id: 1,\n  *            name: \"David\",\n  *            role: [\"IC\",\"Usher\"],\n  *            date: [\"1 June\",\"2 June\"]\n  *           },\n  *           {\n  *            id: 3,\n  *            name: \"Aaron\",\n  *            role: [\"IC\"],\n  *            date: [\"1 June\"]\n  *           },\n  *          ]\n  *         } \n  * }\n  * ]\n  * Different Dates can have repeating Events\n  */\n  insertTimesheetData(args) {\n    let { rowIndex, colIndexes } \u003d this.getHeader(\"No.\")[0];\n    let serialNoColIndex \u003d this.getHeader(\"ESS Serial No.\")[0].colIndexes[0];\n    let nameColIndex \u003d this.getHeader(\"Name\")[0].colIndexes[0];\n    let roleColIndex \u003d this.getHeader(\"Role\")[0].colIndexes[0];\n    let dateColIndex \u003d this.getHeader(\"Date\")[0].colIndexes[0];\n    let insertRow \u003d this.getAllData().slice(rowIndex + 1);\n    let serialNoIndexes \u003d insertRow.map(data \u003d\u003e data[serialNoColIndex]);\n    insertRow \u003d insertRow.map(val \u003d\u003e val.slice(1));\n\n    console.log(\"Inserting Data\");\n    let data \u003d args.filter(value \u003d\u003e serialNoIndexes.includes(value.id));\n    if (data.length) {\n      let currentCell \u003d insertRow.filter(row \u003d\u003e row[colIndexes[0]]).map((dataRow, rowIndex) \u003d\u003e {\n        let columnIndexes \u003d dataRow.slice(nameColIndex[0], dateColIndex).map((col, colIndex) \u003d\u003e {\n          if (col \u003d\u003d\u003d \"\")\n            return colIndex;\n        }).filter(value \u003d\u003e value !\u003d\u003d undefined);\n        return { columnIndexes, rowIndex };\n      }).filter(val \u003d\u003e val.columnIndexes.length);\n      currentCell.forEach(row \u003d\u003e {\n        let rowIndex \u003d row.rowIndex;\n        let val \u003d data[rowIndex];\n        if (val) {\n          let roles \u003d [... new Set(val.role)].join(\",\");\n          let dates \u003d [... new Set(val.date)].join(\",\");\n          row.columnIndexes.forEach(col \u003d\u003e {\n            if (col \u003d\u003d serialNoColIndex - 1) insertRow[rowIndex][col] \u003d val.id;\n            else if (col \u003d\u003d nameColIndex - 1) insertRow[rowIndex][col] \u003d val.name;\n            else if (col \u003d\u003d roleColIndex - 1) insertRow[rowIndex][col] \u003d roles;\n            else if (col \u003d\u003d dateColIndex - 1) insertRow[rowIndex][col] \u003d dates;\n            return;\n          })\n        }\n      })\n      this.insertData(rowIndex + 2,colIndexes[0] + 1, insertRow.length,insertRow[0].length, insertRow);\n    }\n\n    console.log(\"Appending Data\");\n    let appendIndex \u003d insertRow.findIndex(row \u003d\u003e !row[0]);\n    let appendData \u003d args.filter(value \u003d\u003e !serialNoIndexes.includes(value.id))\n                        .map((val,index) \u003d\u003e {\n                          let roles \u003d [... new Set(val.role)].join(\",\");\n                          let dates \u003d [... new Set(val.date)].join(\",\");\n                          return [appendIndex + index+ 1,val.id,val.name,roles,dates];\n                          });\n    if (appendData.length)\n      this.insertData(appendIndex + (rowIndex + 2), colIndexes[0] + 1,appendData.length,appendData[0].length, appendData);\n  }\n}"},{"id":"a5fdc721-f98d-4764-82a3-d76ed99a7bb9","name":"Menu","type":"server_js","source":"class Menu {\n\n  /**\n  * Template Create Menu\n  * @params {Spreadsheet} spreadsheet: Spreadsheet which can retrieve menu from\n  * @params {string} menuName: Name of the main Menu\n  * @params {Array} args: Menu items which contains both name of the menu and name of the function\n  * Example args: [[\"subMenuName\",\"functionName\"],[...args]] \n  */\n  static createMenu(spreadsheet, menuName, ...args) {\n    if (spreadsheet instanceof Object \u0026\u0026  typeof menuName !\u003d\u003d \"string\" \u0026\u0026 !Array.isArray(args))\n      throw new TypeError(\"Inputs are invalid, please ensure that it follow the correct format\");\n    let data \u003d args.map(row \u003d\u003e {return {name: row[0], functionName: row[1]}})\n    console.log(data);\n    spreadsheet.addMenu(menuName, data);\n  }\n}"},{"id":"860e698b-3ca7-43ad-8f1e-dc2cd9b9cea2","name":"menuAutomation","type":"server_js","source":"/*------------------------------------------------------------------------------ Menu Trigger ------------------------------------------------------------------------------------------------------*/\n/**\n * Trigger Function which updates Roster Spreadsheet\n * Insertion of Data\n */\nfunction updateRosterSpreadsheet() {\n  try {\n    let activeSS \u003d SpreadsheetApp.getActiveSpreadsheet();\n    let activeSheet \u003d activeSS.getActiveSheet();\n    let monthName \u003d activeSheet.getName();\n    let ss \u003d new Spreadsheet(activeSS);\n\n    ss.insertDataToSheet(TemplateType.Roster, monthName);\n  } catch (e) {\n    const ui \u003d SpreadsheetApp.getUi();\n    const handler \u003d new ErrorHandler(ui);\n    handler.createAlert(e);\n    ErrorHandler.insertErrorLog(e);\n  }\n}\n\n/**\n * Trigger Function which refreshes Availability Data\n */\nfunction refreshAvailabilityData(timeBoundEvent) {\n  try {\n    let startTime \u003d Date.now();\n    let activeSS \u003d SpreadsheetApp.getActiveSpreadsheet();\n    let activeSheet \u003d timeBoundEvent ? activeSS.getSheetByName(cache.get(`${activeSS.getId()}`)) : SpreadsheetApp.getActiveSheet();\n    let triggerName \u003d `${activeSS.getId()}_${activeSheet.getSheetId()}`;\n    console.log(activeSheet.getName());\n    cache.put(`${activeSS.getId()}`,activeSheet.getName());\n    let monthName \u003d activeSheet.getName();\n    let year \u003d dateHelper.getYear().slice(2);\n\n    console.log(\"Retrieving Personal Data\");\n    let { files } \u003d retrieveIndividualSpreadsheet();\n\n    let keys \u003d properties.getProperty(triggerName);\n    console.log(keys);\n    if (keys) {\n      let trigger \u003d ScriptApp.getProjectTriggers().find(val \u003d\u003e val.getUniqueId() \u003d\u003d\u003d keys);\n      if (trigger)\n        ScriptApp.deleteTrigger(trigger);\n      properties.deleteProperty(triggerName);\n    }\n    let sheet \u003d new Sheet(activeSheet);\n    console.log(\"Retrieving All Data from Spreadsheet\");\n    console.log(\"Running Partitioning\");\n    files.sort((a,b) \u003d\u003e a.getName() - b.getName());\n    insertAvailabilityToMain(startTime, triggerName, \"refreshAvailabilityData\", files,monthName,year,sheet);\n    if (Date.now() - startTime \u003e MAX_TIME_INTERVAL \u0026\u0026 !timeBoundEvent)\n      SpreadsheetApp.getUi().alert(\"Generating User\u0027s Template will be running in the background! Please wait!\");\n  } catch (e) {\n    if (!timeBoundEvent) {\n      const ui \u003d SpreadsheetApp.getUi();\n      const handler \u003d new ErrorHandler(ui);\n      handler.createAlert(e);\n    } else {\n      ErrorHandler.insertErrorLog(e);\n    }\n  }\n}\n\nfunction clearCache() {\n  try {\n    let activeSS \u003d SpreadsheetApp.getActiveSpreadsheet();\n    let activeSheet \u003d activeSS.getActiveSheet();\n    let triggerName \u003d `${activeSS.getId()}_${activeSheet.getSheetId()}`;\n    cache.remove(`${triggerName}_Index`);\n  } catch (e) {\n\n  }\n}\n\n/**\n * Generate Timesheet\n * Servicing of Roster Mastersheet Data into usable Data\n * Get Availability, Roster Role, Event ID, ESS ID \u0026 Name\n */\nfunction generateTimesheet(timeBoundEvent) {\n  try {\n    let startTime \u003d Date.now();\n    let activeSS \u003d SpreadsheetApp.getActiveSpreadsheet();\n    let activeSheet \u003d timeBoundEvent ? activeSS.getSheetByName(cache.get(`${activeSS.getId()}`)) : SpreadsheetApp.getActiveSheet();\n    let triggerName \u003d `${activeSS.getId()}_${activeSheet.getSheetId()}`;\n    cache.put(`${activeSS.getId()}`,activeSheet.getName());\n    let sheet \u003d new Sheet(activeSheet);\n    let data \u003d sheet.getAllData();\n\n    let keys \u003d properties.getProperty(triggerName);\n    if (keys) {\n      let trigger \u003d ScriptApp.getProjectTriggers().find(val \u003d\u003e val.getUniqueId() \u003d\u003d\u003d keys);\n      if (trigger)\n        ScriptApp.deleteTrigger(trigger);\n      properties.deleteProperty(triggerName);\n    }\n\n    let events \u003d cache.get(triggerName);\n    if (!events) {\n      // Getting ALL Dates\n      let dateRange \u003d data[0].filter(value \u003d\u003e value !\u003d\u003d \"\");\n      dateRange.shift();\n\n      console.log(\"Getting Subheaders\");\n      // Getting All Subheaders\n      let eventIDIndexes \u003d sheet.getHeader(\"Event ID\");\n      let rosteredRoleIndexes \u003d sheet.getHeader(\"Rostered Role\");\n      let availabilityIndexes \u003d sheet.getHeader(\"Availability\");\n      let idIndexes \u003d sheet.getHeader(\"ESS ID\");\n      let nameIndexes \u003d sheet.getHeader(\"Name\");\n      let firstRow \u003d eventIDIndexes[0].rowIndex;\n      let values \u003d data.slice(firstRow + 1);\n\n      // Retrieving All data and Formatting\n      /**\n       * Data Sample:\n       * [{\n       *   id: \"OTH #2023-001\"\n       *   crew : [\n       *           {\n       *            id: 1,\n       *            name: \"David\",\n       *            role: [\"IC\",\"Usher\"],\n       *            date: [\"1 June\",\"2 June\"]\n       *           },\n       *           {\n       *            id: 3,\n       *            name: \"Aaron\",\n       *            role: [\"IC\"],\n       *            date: [\"1 June\"]\n       *           },\n       *          ]\n       *         } \n       * }\n       * ]\n       */\n      console.log(\"Getting Unique Events\");\n      events \u003d [];\n      dateRange.forEach((value, index) \u003d\u003e {\n        let date \u003d dateHelper.getDate(value);\n        values.forEach(valueRow \u003d\u003e {\n          let avail \u003d valueRow[availabilityIndexes[0].colIndexes[index]];\n          if (avail \u003d\u003d\u003d \"Not Available\" || avail \u003d\u003d\u003d \"\")\n            return;\n          let eID \u003d valueRow[eventIDIndexes[0].colIndexes[index]];\n          let id \u003d valueRow[idIndexes[0].colIndexes[0]];\n          let name \u003d valueRow[nameIndexes[0].colIndexes[0]];\n          let role \u003d valueRow[rosteredRoleIndexes[0].colIndexes[index]];\n          var event \u003d events.find(data \u003d\u003e data.id \u003d\u003d eID);\n          if (events.includes(event)) {\n            let crew \u003d event.crew.find(data \u003d\u003e data.id \u003d\u003d\u003d id);\n            if (!event.crew.includes(crew))\n              event.crew.push({ id, name, role: [role], date: [date] });\n            else {\n              crew.role.push(role);\n              crew.date.push(date);\n            }\n          } else if (eID !\u003d\u003d \"\") {\n            events.push({ id: eID, crew: [{ id, name, role: [role], date: [date] }] });\n          } else\n            return;\n        })\n      })\n    } else\n      events \u003d JSON.parse(events);\n\n    //Retrieving Master Folder\n    let year \u003d dateHelper.getYear();\n    let yearlyFolder \u003d folder.retrieveFolderByName(`ESS ${year}`);\n    let eventsFolder \u003d folder.retrieveFolderByName(\"1. Events (OTH) - Quotations x Timesheet x Invoice x Payout\", yearlyFolder);\n\n    console.log(\"Running Partitioning\");\n    createTimesheetAndInsert(startTime, triggerName, \"generateTimesheet\", events, eventsFolder);\n    if (Date.now() - startTime \u003e MAX_TIME_INTERVAL \u0026\u0026 !timeBoundEvent)\n      SpreadsheetApp.getUi().alert(\"Generating User\u0027s Template will be running in the background! Please wait!\");\n  } catch (e) {\n    if (!timeBoundEvent) {\n      const ui \u003d SpreadsheetApp.getUi();\n      const handler \u003d new ErrorHandler(ui);\n      handler.createAlert(e);\n    } else {\n      ErrorHandler.insertErrorLog(e);\n    }\n  }\n}\n\n/**\n * Insert Spreadsheet To all Individual Personnel\n * Work around of Google App Script Execution Time\n * Extend Execution Time of Google App Script from 6 mins to at most 90 mins\n * https://developers.google.com/apps-script/guides/services/quotas\n */\nfunction createNewIndividualTemplate(timeBoundEvent) {\n  try {\n    let startTime \u003d Date.now();\n    let activeSS \u003d SpreadsheetApp.getActiveSpreadsheet();\n    let triggerName \u003d `${activeSS.getId()}_create`;\n    let activeSheet \u003d SpreadsheetApp.getActiveSheet();\n    let sheet \u003d new Sheet(activeSheet);\n    let newMemberFile \u003d cache.get(triggerName);\n    let { masterFolder, fileNames } \u003d retrieveIndividualSpreadsheet();\n    if (!newMemberFile) {\n      let data \u003d sheet.getAllData().slice(1);\n      data \u003d data.map(value \u003d\u003e value.slice(0, 2).join(\"_\"));\n\n      //Retrieve Individuals Folder\n      console.log(\"Retrieve Spreadsheets\");\n      newMemberFile \u003d data.filter(val \u003d\u003e !fileNames.includes(val));\n    } else {\n      console.log(\"Getting From Cache\");\n      newMemberFile \u003d JSON.parse(newMemberFile);\n      let keys \u003d properties.getProperty(triggerName);\n      if (keys) {\n        let trigger \u003d ScriptApp.getProjectTriggers().find(trigger \u003d\u003e trigger.getUniqueId() \u003d\u003d\u003d keys)\n        if (trigger)\n          ScriptApp.deleteTrigger(trigger);\n        properties.deleteProperty(triggerName);\n      }\n    }\n    insertSpreadsheetToIndividuals(startTime, triggerName, \"createNewIndividualTemplate\", newMemberFile, masterFolder);\n    if (Date.now() - startTime \u003e MAX_TIME_INTERVAL \u0026\u0026 !timeBoundEvent)\n      SpreadsheetApp.getUi().alert(\"Generating User\u0027s Template will be running in the background! Please wait!\");\n  } catch (e) {\n    if (!timeBoundEvent) {\n      const ui \u003d SpreadsheetApp.getUi();\n      const handler \u003d new ErrorHandler(ui);\n      handler.createAlert(e);\n    }\n    throw e;\n  }\n}\n/**\n * Generate Individual Template Spreadsheet\n */\nfunction generateIndividualSpreadsheet(timeBoundEvent) {\n  try {\n    let startTime \u003d Date.now();\n    let activeSS \u003d SpreadsheetApp.getActiveSpreadsheet();\n    let activeSheet \u003d SpreadsheetApp.getActiveSheet();\n    let triggerName \u003d `${activeSS.getId()}_generate`;\n    let sheet \u003d new Sheet(activeSheet);\n    let oldMemberFiles \u003d cache.get(triggerName);\n    if (!oldMemberFiles) {\n      let data \u003d sheet.getAllData().slice(1);\n      data \u003d data.map(value \u003d\u003e value.slice(0, 2));\n      let dataIDs \u003d data.map(row \u003d\u003e row[0]);\n      let dataNames \u003d data.map(row \u003d\u003e row[1]);\n\n      //Retrieve Individuals Folder\n      let { files } \u003d retrieveIndividualSpreadsheet();\n\n      oldMemberFiles \u003d files.filter(file \u003d\u003e {\n        let fileName \u003d file.getName().split(\"_\");\n        return dataIDs.includes(parseInt(fileName[0])) \u0026\u0026 dataNames.includes(fileName[1])\n      });\n      oldMemberFiles \u003d oldMemberFiles.map(file \u003d\u003e file.getId());\n    } else {\n      oldMemberFiles \u003d JSON.parse(oldMemberFiles);\n      let keys \u003d properties.getProperty(triggerName);\n      if (keys) {\n        let trigger \u003d ScriptApp.getProjectTriggers().find(trigger \u003d\u003e trigger.getUniqueId() \u003d\u003d\u003d keys)\n        if (trigger)\n          ScriptApp.deleteTrigger(trigger);\n        properties.deleteProperty(triggerName);\n      }\n    }\n    insertSpreadsheetToIndividuals(startTime, triggerName, \"generateIndividualSpreadsheet\", oldMemberFiles);\n    if (Date.now() - startTime \u003e MAX_TIME_INTERVAL \u0026\u0026 !timeBoundEvent)\n      SpreadsheetApp.getUi().alert(\"Generating User\u0027s Template will be running in the background! Please wait!\");\n  } catch (e) {\n    if (!timeBoundEvent) {\n      const ui \u003d SpreadsheetApp.getUi();\n      const handler \u003d new ErrorHandler(ui);\n      handler.createAlert(e);\n    }\n    throw e;\n  }\n}\n\n/**\n * Retrieve All Individuals Spreadsheets\n */\nfunction retrieveIndividualSpreadsheet() {\n  let rootFolder \u003d folder.retrieveFolderByName(\"ESS Main Folder\");\n  let masterFolder \u003d folder.retrieveFolderByName(\"Individuals\", rootFolder);\n  let files \u003d folder.retrieveAllSpreadsheetsInFolder(masterFolder);\n  let fileNames \u003d files.map(file \u003d\u003e file.getName());\n\n  return { masterFolder, files, fileNames };\n}\n\n/*--------------------------------------------------------------------------Time Based Execution ---------------------------------------------------------------------------------------------------- */\n\n/**\n * @params {number} startTime: Starting Time of the first Execution;\n * @params {String} triggerName: Name of the Trigger For Easier Trigger Management\n * @params {String} functionName: Name of the function to be triggered for;\n * @params {Array\u003cString\u003e} fileArrays: Array of string that contains either File Name (Create) or File ID (Generate)\n * @params {Folder} rootFolder: Root Folder in which the spreadsheet is to be inserted\n */\nfunction insertSpreadsheetToIndividuals(startTime, triggerName, functionName, fileArrays, rootFolder \u003d \"\") {\n  // Retrieve Month \u0026 Year\n  let month \u003d dateHelper.getMonthName().slice(0, 3);\n  let nextMonth \u003d dateHelper.getNextMonth().slice(0, 3);\n  let { date } \u003d dateHelper.getCurrentDates();\n  let year \u003d dateHelper.getYear().slice(2);\n\n  console.log(\"Partitioning All Spreadsheets\");\n\n  // Read Access\n  for (let i \u003d 0; i \u003c fileArrays.length; i++) {\n    if (Date.now() - startTime \u003c MAX_TIME_INTERVAL) {\n      let fileSS \u003d fileArrays[i];\n      let f \u003d !rootFolder ? SpreadsheetApp.openById(fileSS) : file.createSpreadsheetToFolder(fileSS, rootFolder);\n      let ss \u003d new Spreadsheet(f);\n      if (!ss.getSheet(`${month} ${year}`))\n        ss.generateTemplate(TemplateType.Individuals, `${month} ${year}`);\n      if (date \u003e 10)\n        ss.generateTemplate(TemplateType.Individuals, `${nextMonth} ${year}`);\n    } else {\n      console.log(\"Extending Time Through Triggers\");\n      cache.put(triggerName, JSON.stringify(fileArrays.slice(i)), 3600);\n      timeBasedTrigger(triggerName, functionName);\n      return;\n    }\n  }\n  cache.put(triggerName, JSON.stringify([]));\n}\n\n\n\n/**\n * Insert Spreadsheet To all Individual Personnel\n * Work around of Google App Script Execution Time\n * Extend Execution Time of Google App Script from 6 mins to at most 90mins\n * https://developers.google.com/apps-script/guides/services/quotas\n * \n * @params {number} startTime: Starting Time of the first Execution\n * @params {String} triggerName: Name of the Trigger For Easier Trigger Management\n * @params {String} functionName: Name of the function to be triggered for\n * @params {JSON} events: JSON representation of Events\n * @params {Folder} rootFolder: Root Folder in which the spreadsheet is to be inserted\n */\nfunction createTimesheetAndInsert(startTime, triggerName, functionName, events, rootFolder \u003d \"\") {\n  for (let i \u003d 0; i \u003c events.length; i++) {\n    if (Date.now() - startTime \u003c MAX_TIME_INTERVAL) {\n      let event \u003d events[i];\n      let id \u003d event.id;\n      let eventFolder \u003d folder.retrieveFolderByName(id, rootFolder);\n      if (!eventFolder) {\n        let hierarchy \u003d {\n          parentFolder: id,\n          subDirectories: [\"Timesheet\"]\n        };\n        folder.generateFolderHierarchy(hierarchy, rootFolder);\n        eventFolder \u003d folder.retrieveFolderByName(id, rootFolder);\n      }\n      let timesheetFolder \u003d folder.retrieveFolderByName(\"Timesheet\", rootFolder);\n      let f \u003d file.retrieveFileByName(`${id}_Timesheet`, timesheetFolder);\n      let fileSS \u003d !f ? file.createSpreadsheetToFolder(`${id}_Timesheet`, timesheetFolder) : SpreadsheetApp.open(f);\n      let ss \u003d new Spreadsheet(fileSS);\n      if (!f)\n        ss.generateTemplate(TemplateType.Timesheet, \"Sheet1\");\n      let modifyData \u003d event.crew;\n      if (!modifyData)\n        continue;\n      modifyData.sort((a, b) \u003d\u003e a.date.length - b.date.length);\n      ss.insertDataToSheet(TemplateType.Timesheet, \"Sheet1\", modifyData);\n    } else {\n      cache.put(triggerName, JSON.stringify(events.slice(i)), 3600);\n      timeBasedTrigger(triggerName, functionName);\n      return;\n    }\n  }\n}\n\n/**\n * \n * @params {number} startTime: Starting Time of the first Execution\n * @params {String} triggerName: Name of the Trigger For Easier Trigger Management\n * @params {String} functionName: Name of the function to be triggered for\n * @params {Array} fileArrays: Array of files\n * @params {Sheet} masterSheet: Availability Sheet\n * @params {string} month: Short Name of the Month\n * @params {number} year: Year which is being retrieved\n */\nfunction insertAvailabilityToMain(startTime, triggerName, functionName, fileArrays, month, year, masterSheet) {\n  console.log(\"Partitioning All Spreadsheets\");\n  let files \u003d [];\n  let queueIndex \u003d cache.get(`${triggerName}_Index`);\n  console.log(queueIndex);\n  queueIndex \u003d !queueIndex ? 0 : JSON.parse(queueIndex);\n  for (queueIndex; queueIndex \u003c fileArrays.length; queueIndex++) {\n    if (Date.now() - startTime \u003c MAX_TIME_INTERVAL) {\n      let fileID \u003d fileArrays[queueIndex].getId();\n      let [id, name] \u003d fileArrays[queueIndex].getName().split(\"_\");\n      console.log(id,name);\n      let f \u003d SpreadsheetApp.openById(fileID);\n      let ss \u003d new Spreadsheet(f);\n      let sheet \u003d ss.getSheet(`${month} ${year}`);\n      if (!sheet)\n        continue;\n      let data \u003d sheet.getAllData().slice(1,32).flatMap(val \u003d\u003e val.slice(1));\n      files.push({id, name, data})\n    } else {\n      console.log(\"Extending Time Through Triggers\");\n      cache.put(`${triggerName}_Index`, queueIndex, 3600);\n      timeBasedTrigger(triggerName, functionName);\n      break;\n    }\n  }\n  masterSheet.insertAvailabilityData(files);\n  return;\n}"}]}